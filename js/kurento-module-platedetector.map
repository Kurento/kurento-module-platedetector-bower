{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../lib/PlateDetectorFilter.js","../lib/browser.js"],"names":["noop","error","result","console","trace","PlateDetectorFilter","super_","call","this","checkPlateDetectorFilter","key","value","ChecktypeError","inherits","require","kurentoClient","disguise","checkType","Transaction","TransactionsManager","Filter","register","abstracts","prototype","setPlateWidthPercentage","plateWidthPercentage","callback","transaction","arguments","Array","shift","apply","undefined","params","bind","_invoke","constructorParams","mediaPipeline","type","required","events","concat","module","exports","check"],"mappings":"AAAA;ACiCA,QAASA,MAAKC,EAAOC,GAGnB,MAFID,IAAOE,QAAQC,MAAMH,GAElBC,EAiBT,QAASG,uBACPA,oBAAoBC,OAAOC,KAAKC,MA2ElC,QAASC,0BAAyBC,EAAKC,GAErC,KAAKA,YAAiBN,sBACpB,KAAMO,gBAAeF,EAAKL,oBAAqBM,GAlHnD,GAAIE,UAAWC,QAAQ,YAEnBC,cAAgBD,QAAQ,kBAExBE,SAAWD,cAAcC,SAEzBC,UAAiBF,cAAcE,UAC/BL,eAAiBK,UAAUL,eAG3BM,YAAcH,cAAcI,oBAAoBD,YAEhDE,OAASL,cAAcM,SAASC,UAAUF,MA0B9CP,UAASR,oBAAqBe,QAqB9Bf,oBAAoBkB,UAAUC,wBAA0B,SAASC,EAAsBC,GACrF,GAAIC,GAAeC,UAAU,YAAcV,aACzBW,MAAMN,UAAUO,MAAMC,MAAMH,eAC5BI,GAMdC,GACFR,qBAAsBA,EAKxB,OAFAC,IAAYA,GAAY1B,MAAMkC,KAAK1B,MAE5BQ,SAASR,KAAK2B,QAAQR,EAAa,0BAA2BM,EAAQP,GAAWlB,OAc1FH,oBAAoB+B,mBAClBC,eACEC,KAAM,wBACNC,UAAU,IASdlC,oBAAoBmC,OAASpB,OAAOoB,OAAOC,QAAQ,kBAkBnDC,OAAOC,QAAUtC,oBAEjBA,oBAAoBuC,MAAQnC;;ACtI5BK,QAAQ","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar disguise = kurentoClient.disguise;\n\nvar checkType      = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\n\nvar Transaction = kurentoClient.TransactionsManager.Transaction;\n\nvar Filter = kurentoClient.register.abstracts.Filter;\n\n\nfunction noop(error, result) {\n  if (error) console.trace(error);\n\n  return result\n};\n\n\n/**\n * Create a {@link PlateDetectorFilter} for the given {@link MediaPipeline}\n *\n * @classdesc\n *  PlateDetectorFilter interface. This type of {@link Endpoint} detects\n *  vehicle plates in a video feed.\n *\n * @extends module:core/abstracts.Filter\n *\n * @constructor module:platedetector.PlateDetectorFilter\n *\n * @fires {@link module:platedetector#event:PlateDetected PlateDetected}\n */\nfunction PlateDetectorFilter(){\n  PlateDetectorFilter.super_.call(this);\n};\ninherits(PlateDetectorFilter, Filter);\n\n\n//\n// Public methods\n//\n\n/**\n * Configures the average width of the license plates in the image represented \n * as an image percentage.\n *\n * @alias module:platedetector.PlateDetectorFilter.setPlateWidthPercentage\n *\n * @param {external:Number} plateWidthPercentage\n *  average width of the license plates represented as an image percentage \n *  [0..1].\n *\n * @param {module:platedetector.PlateDetectorFilter~setPlateWidthPercentageCallback} [callback]\n *\n * @return {external:Promise}\n */\nPlateDetectorFilter.prototype.setPlateWidthPercentage = function(plateWidthPercentage, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  //  \n  // checkType('float', 'plateWidthPercentage', plateWidthPercentage, {required: true});\n  //  \n\n  var params = {\n    plateWidthPercentage: plateWidthPercentage\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return disguise(this._invoke(transaction, 'setPlateWidthPercentage', params, callback), this)\n};\n/**\n * @callback module:platedetector.PlateDetectorFilter~setPlateWidthPercentageCallback\n * @param {external:Error} error\n */\n\n\n/**\n * @alias module:platedetector.PlateDetectorFilter.constructorParams\n *\n * @property {module:core.MediaPipeline} mediaPipeline\n *  the parent {@link MediaPipeline} of this {@link PlateDetectorFilter}\n */\nPlateDetectorFilter.constructorParams = {\n  mediaPipeline: {\n    type: 'kurento.MediaPipeline',\n    required: true\n  }\n};\n\n/**\n * @alias module:platedetector.PlateDetectorFilter.events\n *\n * @extends module:core/abstracts.Filter.events\n */\nPlateDetectorFilter.events = Filter.events.concat(['PlateDetected']);\n\n\n/**\n * Checker for {@link module:platedetector.PlateDetectorFilter}\n *\n * @memberof module:platedetector\n *\n * @param {external:String} key\n * @param {module:platedetector.PlateDetectorFilter} value\n */\nfunction checkPlateDetectorFilter(key, value)\n{\n  if(!(value instanceof PlateDetectorFilter))\n    throw ChecktypeError(key, PlateDetectorFilter, value);\n};\n\n\nmodule.exports = PlateDetectorFilter;\n\nPlateDetectorFilter.check = checkPlateDetectorFilter;\n","/**\n * Loader for the kurento-module-platedetector package on the browser\n */\n\nrequire('.');\n"]}
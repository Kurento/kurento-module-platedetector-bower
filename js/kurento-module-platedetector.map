{"version":3,"sources":["../node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","../lib/browser.js","../lib/PlateDetectorFilter.js"],"names":["require","noop","error","result","console","trace","PlateDetectorFilter","super_","call","this","checkPlateDetectorFilter","key","value","ChecktypeError","inherits","kurentoClient","checkType","Transaction","TransactionsManager","Filter","register","abstracts","prototype","setPlateWidthPercentage","plateWidthPercentage","callback","transaction","arguments","Array","shift","apply","undefined","required","params","bind","_invoke","constructorParams","mediaPipeline","type","events","concat","module","exports","check"],"mappings":"AAAA;AE4BA,QAASC,MAAKC,EAAOC,GAGnB,MAFID,IAAOE,QAAQC,MAAMH,GAElBC,EAkBT,QAASG,uBACPA,oBAAoBC,OAAOC,KAAKC,MA0ElC,QAASC,0BAAyBC,EAAKC,GAErC,KAAKA,YAAiBN,sBACpB,KAAMO,gBAAeF,EAAKL,oBAAqBM,GA/GnD,GAAIE,UAAWd,QAAQ,YAEnBe,cAAgBf,QAAQ,kBAExBgB,UAAiBD,cAAcC,UAC/BH,eAAiBG,UAAUH,eAE3BI,YAAcF,cAAcG,oBAAoBD,YAEhDE,OAASJ,cAAcK,SAASC,UAAUF,MA2B9CL,UAASR,oBAAqBa,QAqB9Bb,oBAAoBgB,UAAUC,wBAA0B,SAASC,EAAsBC,GACrF,GAAIC,GAAeC,UAAU,YAAcV,aACzBW,MAAMN,UAAUO,MAAMC,MAAMH,WAC5BI,MAElBf,WAAU,QAAS,uBAAwBQ,GAAuBQ,UAAU,GAE5E,IAAIC,IACFT,qBAAsBA,EAKxB,OAFAC,IAAYA,GAAYxB,MAAMiC,KAAKzB,MAE5BA,KAAK0B,QAAQT,EAAa,0BAA2BO,EAAQR,IAetEnB,oBAAoB8B,mBAClBC,eACEC,KAAM,gBACNN,UAAU,IASd1B,oBAAoBiC,OAASpB,OAAOoB,OAAOC,QAAQ,kBAkBnDC,OAAOC,QAAUpC,oBAEjBA,oBAAoBqC,MAAQjC;;ADjI5BV,QAAQ","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Loader for the kurento-module-platedetector package on the browser\n */\n\nrequire('.');\n","/* Autogenerated with Kurento Idl */\n\n/*\n * (C) Copyright 2013-2015 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials are made\n * available under the terms of the GNU Lesser General Public License (LGPL)\n * version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n * details.\n */\n\nvar inherits = require('inherits');\n\nvar kurentoClient = require('kurento-client');\n\nvar checkType      = kurentoClient.checkType;\nvar ChecktypeError = checkType.ChecktypeError;\n\nvar Transaction = kurentoClient.TransactionsManager.Transaction;\n\nvar Filter = kurentoClient.register.abstracts.Filter;\n\n\nfunction noop(error, result) {\n  if (error) console.trace(error);\n\n  return result\n};\n\n\n/**\n * Create a {@link module:platedetector.PlateDetectorFilter PlateDetectorFilter}\n *\n * @classdesc\n *  PlateDetectorFilter interface. This type of {@link \n *  module:core/abstracts.Endpoint Endpoint} detects\n *  vehicle plates in a video feed.\n *\n * @extends module:core/abstracts.Filter\n *\n * @constructor module:platedetector.PlateDetectorFilter\n *\n * @fires {@link module:platedetector#event:PlateDetected PlateDetected}\n */\nfunction PlateDetectorFilter(){\n  PlateDetectorFilter.super_.call(this);\n};\ninherits(PlateDetectorFilter, Filter);\n\n\n//\n// Public methods\n//\n\n/**\n * Configures the average width of the license plates in the image represented \n * as an image percentage.\n *\n * @alias module:platedetector.PlateDetectorFilter.setPlateWidthPercentage\n *\n * @param {external:Number} plateWidthPercentage\n *  average width of the license plates represented as an image percentage \n *  [0..1].\n *\n * @param {module:platedetector.PlateDetectorFilter~setPlateWidthPercentageCallback} [callback]\n *\n * @return {external:Promise}\n */\nPlateDetectorFilter.prototype.setPlateWidthPercentage = function(plateWidthPercentage, callback){\n  var transaction = (arguments[0] instanceof Transaction)\n                  ? Array.prototype.shift.apply(arguments)\n                  : undefined;\n\n  checkType('float', 'plateWidthPercentage', plateWidthPercentage, {required: true});\n\n  var params = {\n    plateWidthPercentage: plateWidthPercentage\n  };\n\n  callback = (callback || noop).bind(this)\n\n  return this._invoke(transaction, 'setPlateWidthPercentage', params, callback);\n};\n/**\n * @callback module:platedetector.PlateDetectorFilter~setPlateWidthPercentageCallback\n * @param {external:Error} error\n */\n\n\n/**\n * @alias module:platedetector.PlateDetectorFilter.constructorParams\n *\n * @property {module:core.MediaPipeline} mediaPipeline\n *  the parent {@link module:core.MediaPipeline MediaPipeline} of this {@link \n *  module:platedetector.PlateDetectorFilter PlateDetectorFilter}\n */\nPlateDetectorFilter.constructorParams = {\n  mediaPipeline: {\n    type: 'MediaPipeline',\n    required: true\n  }\n};\n\n/**\n * @alias module:platedetector.PlateDetectorFilter.events\n *\n * @extends module:core/abstracts.Filter.events\n */\nPlateDetectorFilter.events = Filter.events.concat(['PlateDetected']);\n\n\n/**\n * Checker for {@link platedetector.PlateDetectorFilter}\n *\n * @memberof module:platedetector\n *\n * @param {external:String} key\n * @param {module:platedetector.PlateDetectorFilter} value\n */\nfunction checkPlateDetectorFilter(key, value)\n{\n  if(!(value instanceof PlateDetectorFilter))\n    throw ChecktypeError(key, PlateDetectorFilter, value);\n};\n\n\nmodule.exports = PlateDetectorFilter;\n\nPlateDetectorFilter.check = checkPlateDetectorFilter;\n"]}